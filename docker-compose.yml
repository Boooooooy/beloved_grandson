# docker-compose.yml
# 說明：用於本地開發環境，一鍵啟動所有服務與基礎設施。
# 執行：docker-compose up -d
version: '3.8'

services:
  # -------------------------------------------------
  #  1. 基礎設施層 (Infrastructure Layer)
  # -------------------------------------------------
  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./infra/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "15432:5432"
    deploy:
      resources:
        limits:
          cpus: '0.50' # 最多使用 50% 的 CPU 核心
          memory: 512M # 最多使用 512MB 記憶體
        reservations:
          cpus: '0.25'
          memory: 256M
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d ai_assistant_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: rabbitmq_queue
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"  # AMQP protocol
      - "15672:15672" # Management UI
    restart: unless-stopped

  etcd:
    container_name: milvus-etcd # 容器名稱
    image: quay.io/coreos/etcd:v3.6.1 # 使用的 Docker 映像檔
    environment: # 設定環境變數
      # ETCD_AUTO_COMPACTION_MODE=revision: 設定 etcd 自動壓縮模式為基於修訂版本。
      - ETCD_AUTO_COMPACTION_MODE=revision
      # ETCD_AUTO_COMPACTION_RETENTION=1000: 每 1000 個修訂版本進行一次壓縮。
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      # ETCD_QUOTA_BACKEND_BYTES=4294967296: 設定後端儲存的最大容量為 4GB。
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      # ETCD_SNAPSHOT_COUNT=50000: 每 50000 次事務後建立一個快照。
      - ETCD_SNAPSHOT_COUNT=50000
    volumes: # 掛載磁碟區，用於資料持久化
      # 將主機當前目錄下的 volumes/etcd 目錄掛載到容器的 /etcd 目錄。
      - etcd:/etcd
    # 容器啟動時執行的命令
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd

  # MinIO 服務：一個高效能的物件儲存服務，與 Amazon S3 相容，Milvus 用它來儲存向量資料等大型檔案。
  minio:
    container_name: milvus-minio # 容器名稱
    image: quay.io/minio/minio:RELEASE.2025-05-24T17-08-30Z # 使用的 Docker 映像檔
    environment: # 設定環境變數
      MINIO_ACCESS_KEY: minioadmin # MinIO 的存取金鑰 (使用者名稱)
      MINIO_SECRET_KEY: minioadmin # MinIO 的秘密金鑰 (密碼)
    ports: # 將容器的埠號對應到主機的埠號
      - "9001:9001" # MinIO Web 管理介面的埠號
      - "9000:9000" # MinIO API 的埠號
    volumes: # 掛載磁碟區
      # 將主機當前目錄下的 volumes/minio 目錄掛載到容器的 /data 目錄。
      - minio:/data
    # 容器啟動時執行的命令，並指定 Web 管理介面的位址。
    command: minio server /data --console-address ":9001"
    healthcheck: # 健康檢查，用來確認容器是否正常運行
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"] # 檢查 MinIO 是否存活的指令
      interval: 30s # 每 30 秒檢查一次
      timeout: 20s # 檢查超時時間為 20 秒
      retries: 3 # 如果失敗，重試 3 次


  milvus:
    image: milvusdb/milvus:v2.5.14
    command: ["milvus", "run", "standalone"]
    container_name: milvus_vector_db
    depends_on:
      - etcd
      - minio
    environment:
      - ETCD_ENDPOINTS=etcd:2379
      - MINIO_ADDRESS=minio:9000
    volumes:
      - milvusdata:/milvus/data
    ports:
      - "19530:19530" # Milvus gRPC 服務的預設埠號
      - "9091:9091"   # Milvus RESTful API 的預設埠號

  # -------------------------------------------------
  #  2. 應用程式層 (Application Layer)
  # -------------------------------------------------
  web-app:
    build:
      context: ./services/web-app
      dockerfile: Dockerfile
    container_name: web_app_service
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: on-failure

  ai-worker:
    build:
      context: ./services/ai-worker
      dockerfile: Dockerfile
    container_name: ai_worker_service
    environment:
      - DATABASE_URL=postgresql://admin:secret@postgres:5432/ai_assistant_db
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - LLM_SERVICE_URL=http://llm-service:8000
      - STT_SERVICE_URL=http://stt-service:8000
      - TTS_SERVICE_URL=http://tts-service:8000
    depends_on:
      - rabbitmq
      - postgres
      - redis
      - llm-service
      - stt-service
      - tts-service
    restart: on-failure

  # -------------------------------------------------
  #  3. AI 微服務層 (AI Microservices Layer)
  # -------------------------------------------------
  llm-service:
    build:
      context: ./services/llm-service
      dockerfile: Dockerfile
    container_name: llm_service
    environment:
      - MILVUS_HOST=milvus
      - MILVUS_PORT=19530
    ports:
      - "8001:8000" # Expose on 8001 to avoid conflict if run locally
    depends_on:
      - milvus
    deploy:
      resources:
        limits:
          memory: 4G # 根據模型大小設定記憶體上限
        reservations:
          memory: 2G # 為其保留至少 2G 記憶體
    restart: on-failure

  stt-service:
    build:
      context: ./services/stt-service
      dockerfile: Dockerfile
    container_name: stt_service
    ports:
      - "8002:8000"
    restart: on-failure

  tts-service:
    build:
      context: ./services/tts-service
      dockerfile: Dockerfile
    container_name: tts_service
    ports:
      - "8003:8000"
    restart: on-failure

  # -------------------------------------------------
  #  4. 邊緣網路層 (Edge Layer)
  # -------------------------------------------------
  nginx:
    image: nginx:1.25-alpine
    container_name: nginx_load_balancer
    ports:
      - "80:80"
    volumes:
      - ./infra/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - web-app
    restart: unless-stopped

# -------------------------------------------------
#  5. 具名磁碟區 (Named Volumes)
# -------------------------------------------------
volumes:
  pgdata:
  redisdata:
  milvusdata:
  minio:
  etcd:
