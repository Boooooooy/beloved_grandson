# docker-compose.prod.yml
# 說明：用於生產環境的部署。所有服務都在容器內運行，不掛載本地程式碼。
# 執行：docker-compose -f docker-compose.prod.yml up --build -d
version: '3.8'

services:
  # -------------------------------------------------
  #  1. 基礎設施層 (Infrastructure Layer)
  # -------------------------------------------------
  postgres:
    image: postgres:15-alpine
    container_name: prod_postgres_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./infra/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "15432:5432"
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: prod_redis_cache
    volumes:
      - redisdata:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: prod_rabbitmq_queue
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    ports:
      - "15672:15672" # 只暴露管理介面給內網或特定IP
    restart: unless-stopped

  etcd:
    container_name: prod_milvus-etcd
    image: quay.io/coreos/etcd:v3.6.1
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    restart: unless-stopped

  minio:
    container_name: prod_milvus-minio
    image: quay.io/minio/minio:RELEASE.2025-05-24T17-08-30Z
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    volumes:
      - minio:/data
    command: minio server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  milvus:
    image: milvusdb/milvus:v2.5.14
    command: ["milvus", "run", "standalone"]
    container_name: prod_milvus_vector_db
    depends_on:
      - etcd
      - minio
    environment:
      - ETCD_ENDPOINTS=etcd:2379
      - MINIO_ADDRESS=minio:9000
    volumes:
      - milvusdata:/milvus/data
    restart: unless-stopped

  # -------------------------------------------------
  #  2. 應用程式層 (Production Mode)
  # -------------------------------------------------
  web-app:
    build:
      context: ./services/web-app
      dockerfile: Dockerfile # 應確保此 Dockerfile 使用 Gunicorn 等生產級伺服器
    container_name: prod_web_app_service
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: on-failure

  ai-worker:
    build:
      context: ./services/ai-worker
      dockerfile: Dockerfile
    container_name: prod_ai_worker_service
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/
      - LLM_SERVICE_URL=http://llm-service:8000
      - STT_SERVICE_URL=http://stt-service:8000
      - TTS_SERVICE_URL=http://tts-service:8000
    depends_on:
      - rabbitmq
      - postgres
      - redis
      - llm-service
      - stt-service
      - tts-service
    restart: on-failure

  # -------------------------------------------------
  #  3. AI 微服務層 (Production Mode)
  # -------------------------------------------------
  llm-service:
    build:
      context: ./services/llm-service
      dockerfile: Dockerfile
    container_name: prod_llm_service
    environment:
      - MILVUS_HOST=milvus
      - MILVUS_PORT=19530
    depends_on:
      - milvus
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    restart: on-failure

  stt-service:
    build:
      context: ./services/stt-service
      dockerfile: Dockerfile
    container_name: prod_stt_service
    restart: on-failure

  tts-service:
    build:
      context: ./services/tts-service
      dockerfile: Dockerfile
    container_name: prod_tts_service
    restart: on-failure

  # -------------------------------------------------
  #  4. 邊緣網路層 (Edge Layer)
  # -------------------------------------------------
  nginx:
    image: nginx:1.25-alpine
    container_name: prod_nginx_load_balancer
    ports:
      - "80:80"
      - "443:443" # 為 HTTPS 預留
    volumes:
      - ./infra/nginx/default.conf:/etc/nginx/conf.d/default.conf
      # - ./path/to/your/ssl_certs:/etc/nginx/ssl # 生產環境應掛載 SSL 憑證
    depends_on:
      - web-app
    restart: unless-stopped

# -------------------------------------------------
#  5. 具名磁碟區 (Production Volumes)
# -------------------------------------------------
volumes:
  pgdata:
  redisdata:
  milvusdata:
  minio:
  etcd:
